from aiogram import Router, F, types
from aiogram.client import bot
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from function_password import special_symbols, months, roman_numerals, str_digits, russian_letter, russian_letter_upper
from keyboards import reply

password_router = Router()


@password_router.message(F.text == "üîí Password")
async def password_handle(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å")
    await state.set_state("password")


@password_router.message(StateFilter("password"))
async def password(message: types.Message):
    include_letter = False
    for letter in russian_letter:
        if letter in message.text:
            include_letter = True
            break
    if not include_letter:
        return await message.answer(text="–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∞–∂—Ç—å –±—É–∫–≤—ã")
    if len(message.text) < 5:
        return await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 5 —Å–∏–º–≤–æ–ª–æ–≤")
    include_digits = False
    for digit in str_digits:
        if digit in message.text:
            include_digits = True
            break
    if not include_digits:
        return await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã")
    include_letter_upper = False
    for letter in russian_letter_upper:
        if letter in message.text:
            include_letter_upper = True
            break
    if not include_letter_upper:
        return await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
    include_symbols = False
    for symbols in special_symbols:
        if symbols in message.text:
            include_symbols = True
            break
    if not include_symbols:
        return await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã")
    for i in message.text:
        listt = []
        if i in str_digits:
            listt.append(int(i))
            if sum(listt) != 25:
                return await message.answer("–°—É–º–º–∞ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –≤ –ø–∞—Ä–æ–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 25")
    include_month = False
    for month in months:
        if month in message.text:
            include_month = True
            break
    if not include_month:
        return await message.answer("–í–∞—à –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –º–µ—Å—è—Ü –≥–æ–¥–∞")
    include_roman_numerals = False
    for numerals in roman_numerals:
        if numerals in message.text:
            include_roman_numerals = True
            break
    if not include_roman_numerals:
        return await message.answer("–í–∞—à –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–∏–º—Å–∫—É—é —Ü–∏—Ñ—Ä—É")
    if "XXXV" not in message.text:
        return await message.answer("–í–∞—à–∞ —Ä–∏–º—Å–∫–∞—è —Ü–∏—Ñ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 35")
    if "ee610c" not in message.text:
        await message.answer_photo(
            photo="https://avatars.mds.yandex.net/i?id=b63075de51d98e8458544400b7815317_sr-5279278-images-thumbs&n=13")
        return await message.answer("–í–∞—à –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç—Ç—É –∫–∞–ø—Ç—á—É")
    await message.answer(text="–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –ø—Ä–∏–¥—É–∞–º–ª –ø–∞—Ä–æ–ª—å", reply_markup=reply.play)
