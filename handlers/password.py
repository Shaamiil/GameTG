from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from function_password import special_symbols, months, roman_numerals, str_digits, russian_letter, russian_letter_upper, \
    english_letter_upper, english_letter, wordle_day, elements, dict_country_random, dict_country
from keyboards import reply

password_router = Router()


@password_router.message(F.text == "üîí Password")
async def password_handle(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å")
    await state.set_state("password")


@password_router.message(StateFilter("password"))
async def password(message: types.Message, state: FSMContext):
    wordle = await wordle_day()
    country = dict_country_random()
    if " " in message.text:
        return await message.answer("–í –≤–∞—à–µ–º –ø–∞—Ä–æ–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤")
    list_letter = []
    for letter in message.text:
        if letter in russian_letter or letter in russian_letter_upper or letter in english_letter_upper \
                or letter in english_letter:
            if letter.lower() not in list_letter:
                list_letter.append(letter.lower())
            else:
                return await message.answer(text="–í –≤–∞—à–µ–º –ø–∞—Ä–æ–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –±—É–∫–≤")
    include_russian = False
    include_english = False
    for letter in russian_letter:
        if letter in message.text:
            include_russian = True
            break
    for letter in english_letter:
        if letter in message.text:
            include_english = True
            break
    if not (include_russian or include_english):
        return await message.answer(text="–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∞–∂—Ç—å –±—É–∫–≤—ã")
    if len(message.text) < 10:
        return await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 10 —Å–∏–º–≤–æ–ª–æ–≤")
    include_digits = False
    for digit in str_digits:
        if digit in message.text:
            include_digits = True
            break
    if not include_digits:
        return await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã")
    include_upper = False
    for letter in russian_letter_upper + english_letter_upper:
        if letter in message.text:
            include_upper = True
            break
    if not include_upper:
        return await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
    include_symbols = False
    for symbols in special_symbols:
        if symbols in message.text:
            include_symbols = True
            break
    if not include_symbols:
        return await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã")
    listt = []
    for number in message.text:
        if number in str_digits:
            listt.append(int(number))
    if sum(listt) <= 25:
        return await message.answer("–°—É–º–º–∞ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –≤ –ø–∞—Ä–æ–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 25")
    if sum(listt) % 3 != 0:
        return await message.answer("–°—É–º–º–∞ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 3")
    # if str(sum(listt)*sum(listt)) not in message.text:
    #     return await message.answer(text="–í –≤–∞—à–µ–º –ø–∞—Ä–æ–ª–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–≤–∞–¥—Ä–∞—Ç —Å—É–º–º—ã –≤—Å–µ—Ö –≤–∞—à–∏—Ö —á–∏—Å–µ–ª")
    include_month = False
    for month in months:
        if month in message.text:
            include_month = True
            break
    if not include_month:
        return await message.answer("–í–∞—à –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –º–µ—Å—è—Ü –≥–æ–¥–∞")
    include_roman_numerals = False
    for numerals in roman_numerals:
        if numerals in message.text:
            include_roman_numerals = True
            break
    if not include_roman_numerals:
        return await message.answer("–í–∞—à –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–∏–º—Å–∫—É—é —Ü–∏—Ñ—Ä—É")
    if "LXV" not in message.text:
        return await message.answer("–í–∞—à–∞ —Ä–∏–º—Å–∫–∞—è —Ü–∏—Ñ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 65")
    if "qGphJD" not in message.text and "DJhpGq" not in message.text:
        await message.answer_photo(
            photo="https://avatars.mds.yandex.net/i?id=27a8438251a808e94c9b7c3b76df165cf3daaff0-12497202-images-thumbs&n=13")
        return await message.answer("–í–∞—à –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç—Ç—É –∫–∞–ø—Ç—á—É(–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)")
    include_elements = False
    for element in elements:
        if element in message.text:
            include_elements = True
            break
    if not include_elements:
        return await message.answer("–í–∞—à –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –ª—é–±–æ–π –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ú–µ–Ω–¥–µ–ª–ª–µ–≤–∞")
    await message.answer(
        "–í–∞—à –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å —Å–ª–æ–≤–æ –¥–Ω—è –∏–∑ –∏–≥—Ä—ã <a href='https://www.nytimes.com/games/wordle/index.html'>"
        "Wordle</a>", )
    await state.update_data({"wordle": wordle,
                             "country": country})
    await state.set_state("wordle")


@password_router.message(StateFilter("wordle"))
async def day_wordle(message: types.Message, state: FSMContext):
    data = await state.get_data()
    wordle = data.get("wordle")
    country = data.get("country")
    if wordle not in message.text:
        return await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç–æ —Å–ª–æ–≤–æ")
    await message.answer("–í–∞—à –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏")
    await message.answer_photo(
        photo=country)
    await state.update_data({"password": message.text})
    await state.set_state("country")


@password_router.message(StateFilter("country"))
async def img_country(message: types.Message, state: FSMContext):
    data = await state.get_data()
    country = data.get("country")
    passwordd = data.get("password")
    if dict_country[country] not in message.text:
        return await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ(")
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –Ω–∞–æ–±–æ—Ä–æ—Ç")
    await state.update_data({"password": message.text})
    await state.set_state("reverse")


@password_router.message(StateFilter("reverse"))
async def reverse_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    passwordd = data.get("password")
    new_password = passwordd[::-1]
    if message.text != new_password:
        return await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –Ω–∞–æ–±–æ—Ä–æ—Ç")
    await message.answer(text="–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –ø—Ä–∏–¥—É–º–∞–ª(–∞) –ø–∞—Ä–æ–ª—å", reply_markup=reply.play)
